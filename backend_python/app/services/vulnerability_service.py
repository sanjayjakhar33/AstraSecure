"""
Vulnerability service layer
"""
from typing import Optional, List
from sqlalchemy.orm import Session
from sqlalchemy import func
from datetime import datetime

from app.models.vulnerability import Vulnerability, VulnerabilityStatus
from app.models.scan_target import ScanTarget
from app.models.user import User


class VulnerabilityService:
    """Vulnerability service for CRUD operations"""
    
    def get(self, db: Session, id: int) -> Optional[Vulnerability]:
        """Get vulnerability by ID"""
        return db.query(Vulnerability).filter(Vulnerability.id == id).first()
    
    def get_multi(
        self,
        db: Session,
        *,
        company_id: int,
        skip: int = 0,
        limit: int = 100,
        severity: Optional[str] = None,
        status: Optional[str] = None,
        target_id: Optional[int] = None
    ) -> List[Vulnerability]:
        """Get multiple vulnerabilities for a company"""
        query = db.query(Vulnerability).join(ScanTarget).filter(
            ScanTarget.company_id == company_id
        )
        
        if severity:
            query = query.filter(Vulnerability.severity == severity)
        if status:
            query = query.filter(Vulnerability.status == status)
        if target_id:
            query = query.filter(Vulnerability.target_id == target_id)
        
        return query.order_by(
            Vulnerability.severity.desc(),
            Vulnerability.created_at.desc()
        ).offset(skip).limit(limit).all()
    
    def can_user_access_vulnerability(self, db: Session, user_id: int, vulnerability_id: int) -> bool:
        """Check if user can access the vulnerability"""
        user = db.query(User).filter(User.id == user_id).first()
        if not user:
            return False
        
        vulnerability = self.get(db, vulnerability_id)
        if not vulnerability:
            return False
        
        target = db.query(ScanTarget).filter(ScanTarget.id == vulnerability.target_id).first()
        if not target:
            return False
        
        # User can access if they belong to the same company or are superuser
        return user.is_superuser or user.company_id == target.company_id
    
    def update_status(
        self,
        db: Session,
        *,
        vulnerability_id: int,
        status: str,
        resolved_by: Optional[str] = None
    ) -> Vulnerability:
        """Update vulnerability status"""
        vulnerability = self.get(db, vulnerability_id)
        if not vulnerability:
            raise ValueError("Vulnerability not found")
        
        vulnerability.status = status
        
        if status == VulnerabilityStatus.RESOLVED:
            vulnerability.resolved_at = datetime.utcnow()
            vulnerability.resolved_by = resolved_by
        
        db.add(vulnerability)
        db.commit()
        db.refresh(vulnerability)
        return vulnerability
    
    def assign_vulnerability(
        self,
        db: Session,
        *,
        vulnerability_id: int,
        assigned_to: str,
        due_date: Optional[datetime] = None
    ) -> Vulnerability:
        """Assign vulnerability to a user"""
        vulnerability = self.get(db, vulnerability_id)
        if not vulnerability:
            raise ValueError("Vulnerability not found")
        
        vulnerability.assigned_to = assigned_to
        vulnerability.due_date = due_date
        
        db.add(vulnerability)
        db.commit()
        db.refresh(vulnerability)
        return vulnerability
    
    def get_vulnerability_stats(self, db: Session, company_id: int) -> dict:
        """Get vulnerability statistics for a company"""
        # Base query for company vulnerabilities
        base_query = db.query(Vulnerability).join(ScanTarget).filter(
            ScanTarget.company_id == company_id
        )
        
        # Count by severity
        severity_counts = {}
        for severity in ["critical", "high", "medium", "low", "info"]:
            count = base_query.filter(
                Vulnerability.severity == severity,
                Vulnerability.status == VulnerabilityStatus.OPEN
            ).count()
            severity_counts[f"{severity}_count"] = count
        
        # Count by status
        status_counts = {}
        for status in ["open", "in_progress", "resolved", "false_positive"]:
            count = base_query.filter(Vulnerability.status == status).count()
            status_counts[f"{status}_count"] = count
        
        # Recent vulnerabilities (last 30 days)
        from datetime import timedelta
        thirty_days_ago = datetime.utcnow() - timedelta(days=30)
        recent_count = base_query.filter(
            Vulnerability.created_at >= thirty_days_ago
        ).count()
        
        # Average time to resolution
        avg_resolution_time = db.query(
            func.avg(
                func.extract('epoch', Vulnerability.resolved_at - Vulnerability.created_at)
            )
        ).join(ScanTarget).filter(
            ScanTarget.company_id == company_id,
            Vulnerability.status == VulnerabilityStatus.RESOLVED,
            Vulnerability.resolved_at.isnot(None)
        ).scalar()
        
        return {
            "total_vulnerabilities": base_query.count(),
            "open_vulnerabilities": status_counts.get("open_count", 0),
            "resolved_vulnerabilities": status_counts.get("resolved_count", 0),
            "recent_vulnerabilities": recent_count,
            "average_resolution_hours": int(avg_resolution_time / 3600) if avg_resolution_time else 0,
            **severity_counts,
            **status_counts
        }


# Create service instance
vulnerability_service = VulnerabilityService()