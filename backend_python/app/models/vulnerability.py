"""
Vulnerability model for security findings
"""
from sqlalchemy import Column, Integer, String, DateTime, ForeignKey, JSON, Text, Float
from sqlalchemy.sql import func
from sqlalchemy.orm import relationship
from enum import Enum

from app.core.database import Base


class VulnerabilitySeverity(str, Enum):
    """Vulnerability severity levels"""
    CRITICAL = "critical"
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"
    INFO = "info"


class VulnerabilityStatus(str, Enum):
    """Vulnerability status"""
    OPEN = "open"
    IN_PROGRESS = "in_progress"
    RESOLVED = "resolved"
    FALSE_POSITIVE = "false_positive"
    ACCEPTED_RISK = "accepted_risk"


class VulnerabilityCategory(str, Enum):
    """Vulnerability categories"""
    NETWORK = "network"
    WEB_APPLICATION = "web_application"
    CONFIGURATION = "configuration"
    ACCESS_CONTROL = "access_control"
    ENCRYPTION = "encryption"
    CODE_SECURITY = "code_security"
    COMPLIANCE = "compliance"
    INFRASTRUCTURE = "infrastructure"


class Vulnerability(Base):
    """Vulnerability findings from security scans"""
    
    __tablename__ = "vulnerabilities"
    
    id = Column(Integer, primary_key=True, index=True)
    
    # Basic information
    title = Column(String, nullable=False)
    description = Column(Text, nullable=False)
    category = Column(String, nullable=False)
    severity = Column(String, nullable=False)
    status = Column(String, default=VulnerabilityStatus.OPEN)
    
    # Technical details
    cve_id = Column(String, nullable=True, index=True)  # CVE identifier if applicable
    cvss_score = Column(Float, nullable=True)  # CVSS base score
    cvss_vector = Column(String, nullable=True)  # CVSS vector string
    
    # Location and context
    affected_asset = Column(String, nullable=True)  # IP, domain, service, etc.
    port = Column(Integer, nullable=True)
    service = Column(String, nullable=True)
    protocol = Column(String, nullable=True)
    
    # Scan information
    scanner_name = Column(String, nullable=False)  # nmap, nikto, custom, etc.
    scan_plugin = Column(String, nullable=True)
    raw_output = Column(Text, nullable=True)  # Original scanner output
    
    # Evidence and proof
    evidence = Column(JSON, default={})  # Screenshots, logs, etc.
    proof_of_concept = Column(Text, nullable=True)
    
    # Remediation
    remediation_guidance = Column(Text, nullable=True)
    remediation_priority = Column(Integer, default=5)  # 1-10 scale
    estimated_effort = Column(String, nullable=True)  # hours, days, weeks
    
    # References
    references = Column(JSON, default=[])  # URLs, documentation links
    
    # Risk assessment
    business_impact = Column(String, nullable=True)
    exploit_complexity = Column(String, nullable=True)
    
    # Relationships
    target_id = Column(Integer, ForeignKey("scan_targets.id"), nullable=False)
    target = relationship("ScanTarget", back_populates="vulnerabilities")
    
    scan_result_id = Column(Integer, ForeignKey("scan_results.id"), nullable=True)
    scan_result = relationship("ScanResult", back_populates="vulnerabilities")
    
    # Assignment and tracking
    assigned_to = Column(String, nullable=True)  # User ID or email
    due_date = Column(DateTime, nullable=True)
    resolved_at = Column(DateTime, nullable=True)
    resolved_by = Column(String, nullable=True)
    
    # Timestamps
    first_seen = Column(DateTime, server_default=func.now())
    last_seen = Column(DateTime, server_default=func.now())
    created_at = Column(DateTime, server_default=func.now())
    updated_at = Column(DateTime, server_default=func.now(), onupdate=func.now())
    
    def __repr__(self):
        return f"<Vulnerability(id={self.id}, title='{self.title}', severity='{self.severity}')>"